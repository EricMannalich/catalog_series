"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

from core.social import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROYECT_NAME = os.environ.get('PROYECT_NAME', default=config('PROYECT_NAME', default='core'))
ROOT_URLCONF = PROYECT_NAME + '.urls'
WSGI_APPLICATION = PROYECT_NAME + '.wsgi.application'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='e154c3b8-0b5b-4dca-8f2d-08cbc07fda82')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG', default=config('DEBUG', default='1'))))

ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS', default=config('ALLOWED_HOSTS', default='localhost'))
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))

# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

LOCAL_APPS = [
    'apps.base',
    'apps.users',
    'apps.principal',
]

THIRD_APPS = [
    'corsheaders',
    'rest_framework',
    'simple_history',
    'tinymce',
]

INSTALLED_APPS = BASE_APPS + LOCAL_APPS + THIRD_APPS + SOCIAL_AUTH_APPS

MIDDLEWARE = SOCIAL_AUTH_MIDDLEWARE + [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    ]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors':SOCIAL_AUTH_CONTEXT_PROCESSOR + [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DEFAULT_PERMISSION_ENV = "rest_framework.permissions.IsAuthenticated"

DEFAULT_RENDERER_CLASSES = (
    'rest_framework.renderers.JSONRenderer',
)

if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
    DEFAULT_PERMISSION_ENV = 'rest_framework.permissions.AllowAny'
else:
    MIDDLEWARE = MIDDLEWARE + ['core.middleware.iplocationuser',]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        SOCIAL_AUTH_DEFAULT_AUTHENTICATION_CLASSES,
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        DEFAULT_PERMISSION_ENV,
    ),
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES
    
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
POSTGRES_BD = os.environ.get('POSTGRES_BD', default = config('POSTGRES_CLIENT_BD', default=PROYECT_NAME))
POSTGRES_USER = os.environ.get('POSTGRES_USER', default = config('POSTGRES_CLIENT_USER', default="postgres"))
POSTGRES_PASSWORD = os.environ.get('POSTGRES_PASSWORD', default=config('POSTGRES_CLIENT_PASSWORD', default="postgres"))
POSTGRES_HOST = os.environ.get('POSTGRES_HOST', default="127.0.0.1")
POSTGRES_PORT = os.environ.get('POSTGRES_PORT', default="5432")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': POSTGRES_BD,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': POSTGRES_HOST,
        'DATABASE_PORT': POSTGRES_PORT,
    }
}

# Cache (python-memcached and pymemcache)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': '127.0.0.1:11211',
    }
}
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'users.User'


# Security
CSRF_COOKIE_SECURE = True

CSRF_TRUSTED_ORIGINS = []
CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('CSRF_TRUSTED_ORIGINS', default=config('CSRF_TRUSTED_ORIGINS', default=""))
if CSRF_TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS.extend(CSRF_TRUSTED_ORIGINS_ENV.split(','))

SESSION_COOKIE_SECURE = True

SECURE_HSTS_SECONDS = os.environ.get('SECURE_HSTS_SECONDS', default=config('SECURE_HSTS_SECONDS', default=0))

SECURE_SSL_REDIRECT = bool(int(os.environ.get('SECURE_SSL_REDIRECT', default="0")))

SECURE_SSL_HOST = os.environ.get('SECURE_SSL_HOST', default=config('SECURE_SSL_HOST', default=""))

CORS_ORIGIN_ALLOW_ALL = False

CORS_ALLOW_CREDENTIALS = False

if DEBUG:
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = []
CORS_ALLOWED_ORIGINS_ENV = os.environ.get('CORS_ALLOWED_ORIGINS', default=config('CORS_ALLOWED_ORIGINS', default=""))
if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS.extend(CORS_ALLOWED_ORIGINS_ENV.split(','))

CORS_ORIGIN_WHITELIST = []
CORS_ORIGIN_WHITELIST_ENV = os.environ.get('CORS_ORIGIN_WHITELIST', default=config('CORS_ORIGIN_WHITELIST', default=""))
if CORS_ORIGIN_WHITELIST_ENV:
    CORS_ORIGIN_WHITELIST.extend(CORS_ORIGIN_WHITELIST_ENV.split(','))

CORS_ALLOWED_ORIGINS_REGEXE = []
CORS_ALLOWED_ORIGINS_REGEXE_ENV = os.environ.get('CORS_ALLOWED_ORIGINS_REGEXE', default=config('CORS_ALLOWED_ORIGINS_REGEXE', default=""))
if CORS_ALLOWED_ORIGINS_REGEXE_ENV:
    CORS_ALLOWED_ORIGINS_REGEXE.extend(CORS_ALLOWED_ORIGINS_REGEXE_ENV.split(','))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
BD_ROOT = os.path.join(BASE_DIR, 'bd_backup')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
